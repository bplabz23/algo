class Solution {
public:
    vector<vector<int>> combine(int n, int k) {

        // 1. Create a list to hold our sub/combinations
        vector<vector<int>> combinations = vector<vector<int>>();

        // 2a. Base case: choose 1 item from our set
        if (k == 1)
        {
            // just return each individual number as a combination
            for (int i = n; i > 0; i--)
            {
                vector<int> combo = vector<int>();
                combo.push_back(i);
                combinations.push_back(combo);
            }

            return combinations;
        }
    


        // 2b. Base case: k = n
        if (k == n)
        {
            // just return a single combination of all the numbers
            vector<int> combo = vector<int>();

            for (int i = n; i > 0; i--)
            {              
                combo.push_back(i);
            }
            
            combinations.push_back(combo);
            return combinations;
        }


        // 2c. Base case: n = 1
        if (n == 1 && k == 1)
        {
            vector<int> combo = vector<int>();
            combo.push_back(1);
            combinations.push_back(combo);
            return combinations;
        }



        // Otherwise, general case:

        for (int i = n; i > 0; i--)                                             // For every value i:  [1,n]
        {
            vector<vector<int>> subcombinations = combine(i - 1, k - 1);       
            for(int j = 0; j < subcombinations.size(); j++)                     // For every other subcombination j: [1, n-1]
            {
                vector<int> combo = vector<int>();
                combo.push_back(i);                                             // Make a combination that starts with i

                for (int z = 0; z < subcombinations[j].size(); z++)                 // Add every other int in combination j to it
                {
                    combo.push_back( subcombinations[j][z] );
                }

                combinations.push_back(combo);                                  // Return this merged combination
            }
        }

        return combinations;
    }

};
